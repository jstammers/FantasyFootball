import pandas as pd
from pydantic import BaseModel
import pandera as pa
from pandera.typing import Series, DataFrame

MatchSummarySchema = pa.DataFrameSchema(
    {
        "MatchURL": pa.Column(str),
        "League": pa.Column(str),
        "Match_Date": pa.Column(pa.Date),
        "Matchweek": pa.Column(int),
        "Home_Team": pa.Column(str),
        "Home_Formation": pa.Column(str),
        "Home_Score": pa.Column(int),
        "Home_xG": pa.Column(float),
        "Home_Goals": pa.Column(int),
        "Home_Yellow_Cards": pa.Column(int),
        "Home_Red_Cards": pa.Column(int),
        "Away_Team": pa.Column(str),
        "Away_Formation": pa.Column(str),
        "Away_Score": pa.Column(int),
        "Away_xG": pa.Column(float),
        "Away_Goals": pa.Column(int),
        "Away_Yellow_Cards": pa.Column(int),
        "Away_Red_Cards": pa.Column(int),
        "Game_URL": pa.Column(str),
        "Team": pa.Column(str),
        "Home_Away": pa.Column(str),
        "Event_Time": pa.Column(str),
        "Is_Pens": pa.Column(str),
        "Event_Half": pa.Column(str),
        "Event_Type": pa.Column(str),
        "Event_Players": pa.Column(str),
        "Score_Progression": pa.Column(str),
        "Penalty_Number": pa.Column(str),
        "Competition_Name": pa.Column(str),
        "Gender": pa.Column(str),
        "Country": pa.Column(str),
        "Tier": pa.Column(str),
        "Season_End_Year": pa.Column(int),
    },
    coerce=True,
    strict=True,
)

MatchResultsSchema = pa.DataFrameSchema(
    {
        "Competition_Name": pa.Column(str),
        "Gender": pa.Column(str),
        "Country": pa.Column(str),
        "Season_End_Year": pa.Column("Int64"),
        "Tier": pa.Column(str),
        "Round": pa.Column(str, nullable=True),
        "Wk": pa.Column("Int64", nullable=True),
        "Day": pa.Column(str, nullable=True),
        "Date": pa.Column(pa.Date),
        "Time": pa.Column(str, nullable=True),
        "Home": pa.Column(str),
        "HomeGoals": pa.Column("Int64", nullable=True),
        "Home_xG": pa.Column("Float64", nullable=True),
        "Away": pa.Column(str),
        "AwayGoals": pa.Column("Int64", nullable=True),
        "Away_xG": pa.Column("Float64", nullable=True),
        "Attendance": pa.Column("Int64", nullable=True),
        "Venue": pa.Column(str, nullable=True),
        "Referee": pa.Column(str, nullable=True),
        "Notes": pa.Column(str, nullable=True),
        "MatchURL": pa.Column(str, nullable=True),
    },
    coerce=True,
    strict=True,
)

MatchShootingSchema = pa.DataFrameSchema(
    {
        "MatchURL": pa.Column(str),
        "Date": pa.Column(pa.Date),
        "Squad": pa.Column(str),
        "Home_Away": pa.Column(str),
        "Match_Half": pa.Column(str),
        "Minute": pa.Column("Int64"),
        "Player": pa.Column(str),
        "Player_Href": pa.Column(str),
        "xG": pa.Column("Float64"),
        "PSxG": pa.Column("Float64"),
        "Outcome": pa.Column(str),
        "Distance": pa.Column("Float64"),
        "Body Part": pa.Column(str),
        "Notes": pa.Column(str),
        "Player_SCA_1": pa.Column(str),
        "Event_SCA_1": pa.Column(str),
        "Player_SCA_2": pa.Column(str),
        "Event_SCA_2": pa.Column(str),
        "Competition_Name": pa.Column(str),
        "Gender": pa.Column(str),
        "Country": pa.Column(str),
        "Tier": pa.Column(str),
        "Season_End_Year": pa.Column("Int64"),
    },
    coerce=True,
    strict=True,
)